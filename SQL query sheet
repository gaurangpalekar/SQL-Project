DROP TABLE IF EXISTS stock_adjustment_recommendations;

CREATE TABLE stock_adjustment_recommendations AS
SELECT 
    product_id,
    category,
    region,
    AVG(inventory_level) AS avg_inventory,
    SUM(units_sold) AS total_units_sold,
    CASE 
        WHEN SUM(units_sold) < AVG(inventory_level) * 0.5 THEN 'Reduce Stock'
        WHEN SUM(units_sold) > AVG(inventory_level) * 1.5 THEN 'Increase Stock'
        ELSE 'Stock Level Optimal'
    END AS stock_adjustment_recommendation
FROM 
    productinventory
GROUP BY 
    product_id, category, region
ORDER BY 
    product_id;









DROP TABLE IF EXISTS product_turnover_analysis;

CREATE TABLE product_turnover_analysis AS
WITH ProductStats AS (
    SELECT 
        product_id,
        SUM(units_sold * price) AS cogs,
        AVG(inventory_level) AS avg_inventory
    FROM 
        productinventory
    GROUP BY 
        product_id
),
Turnover AS (
    SELECT 
        product_id,
        cogs,
        avg_inventory,
        CASE 
            WHEN avg_inventory > 0 THEN cogs / avg_inventory
            ELSE NULL
        END AS inventory_turnover
    FROM ProductStats
)
SELECT * FROM Turnover
ORDER BY inventory_turnover DESC;










DROP TABLE IF EXISTS store_turnover_analysis;

CREATE TABLE store_turnover_analysis AS
WITH StoreStats AS (
    SELECT 
        store_id,
        SUM(units_sold * price) AS cogs,
        AVG(inventory_level) AS avg_inventory
    FROM 
        productinventory
    GROUP BY 
        store_id
),
Turnover AS (
    SELECT 
        store_id,
        cogs,
        avg_inventory,
        CASE 
            WHEN avg_inventory > 0 THEN cogs / avg_inventory
            ELSE NULL
        END AS inventory_turnover
    FROM StoreStats
)
SELECT * FROM Turnover
ORDER BY inventory_turnover DESC;


DROP TABLE IF EXISTS category_turnover_analysis;

CREATE TABLE category_turnover_analysis AS
WITH CategoryStats AS (
    SELECT 
        category,
        SUM(units_sold * price) AS cogs,
        AVG(inventory_level) AS avg_inventory
    FROM 
        productinventory
    GROUP BY 
        category
),
Turnover AS (
    SELECT 
        category,
        cogs,
        avg_inventory,
        CASE 
            WHEN avg_inventory > 0 THEN cogs / avg_inventory
            ELSE NULL
        END AS inventory_turnover
    FROM CategoryStats
)
SELECT * FROM Turnover
ORDER BY inventory_turnover DESC;











CREATE TABLE inventory_turnover_analysis_2 AS
WITH InventoryStats AS (
    SELECT 
        product_id,
        category,
        region,
		store_id,
        SUM(units_sold * price) AS cogs, -- Approximate Cost of Goods Sold
        AVG(inventory_level) AS avg_inventory -- Average Inventory Level
    FROM 
        productinventory
    GROUP BY 
        product_id, category, region, store_id
),
Turnover AS (
    SELECT 
        product_id,
        category,
		store_id,
        region,
        cogs,
        avg_inventory,
        CASE 
            WHEN avg_inventory > 0 THEN cogs / avg_inventory
            ELSE NULL -- Avoid division by zero
        END AS inventory_turnover
    FROM 
        InventoryStats
)
SELECT 
    product_id,
    category,
	store_id,
    region,
    cogs,
    avg_inventory,
    inventory_turnover
FROM 
    Turnover
ORDER BY 
    inventory_turnover DESC; -- High turnover indicates fast-moving products


create table stock_adjustment as
SELECT
    date,
    Store_ID,
    Product_ID,
    Inventory_Level,
    Units_Sold,
    Units_Ordered,
    Demand_Forecast,
    
    -- Calculate projected stock after sales
    Inventory_Level - Units_Sold AS projected_inventory,

    -- Adjustment suggestion
    CASE
        WHEN Inventory_Level - Units_Sold < Demand_Forecast THEN
            CEIL(Demand_Forecast - (Inventory_Level - Units_Sold))  -- Need to restock
        WHEN Inventory_Level > Demand_Forecast * 1.5 THEN
            -CEIL(Inventory_Level - Demand_Forecast * 1.2)  -- Over-stocked, reduce future orders
        ELSE 0  -- Stock level is fine
    END AS stock_adjustment_recommendation

FROM
    Inventory_facts;














create table supplier_performance as
SELECT
    date,
    product_id,
    region,
    SUM(units_ordered) AS total_ordered,
    SUM(units_sold) AS total_sold,
    SUM(units_ordered - units_sold) AS delivery_gap,
    AVG(demand_forecast) AS avg_forecast,
    SUM(inventory_level) AS stock_available,

    CASE
        WHEN SUM(units_ordered) - SUM(units_sold) > 30 THEN 'Possible Overstock'
        WHEN SUM(units_ordered) - SUM(units_sold) < -30 THEN 'Possible Stockout (Supplier Delay)'
        ELSE 'Normal'
    END AS supplier_performance_flag

FROM
    inventory_facts
GROUP BY
    date, product_id, region;
